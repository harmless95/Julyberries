services:
  app_auth:
    build:
      dockerfile: Docker-build/auth/Dockerfile
      context: .
    working_dir: /auth
    environment:
      APP_CONFIG__DB__URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pg:5432/${POSTGRES_DB_AUTH}
    ports:
      - "${APP_AUTH_PORT}:${CONTAINER_AUTH_PORT}"
    depends_on:
      pg:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./auth
          target: /app_auth
        - action: rebuild
          path: auth/poetry.lock
    networks:
      - backend_network

  catalogs_services:
    build:
      dockerfile: Docker-build/catalog/Dockerfile
      context: .
    working_dir: /catalogs_services
    environment:
      APP_CONFIG__DB__URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pg:5432/${POSTGRES_DB_CATALOG}
    ports:
      - "${APP_CATALOG_PORT}:${CONTAINER_CATALOG_PORT}"
    depends_on:
      pg:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./catalogs_services
          target: /catalogs_services
        - action: rebuild
          path: catalogs_services/poetry.lock
    networks:
      - backend_network

  orders_service:
    build:
      dockerfile: Docker-build/order/Dockerfile
      context: .
    working_dir: /orders_service
    environment:
      APP_CONFIG__DB__URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pg:5432/${POSTGRES_DB_ORDER}
    ports:
      - "${APP_ORDER_PORT}:${CONTAINER_ORDER_PORT}"
    depends_on:
      pg:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./orders_service
          target: /orders_service
        - action: rebuild
          path: orders_service/poetry.lock
    networks:
      - backend_network

  pg:
    image: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - backend_network


  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: ${PGADMIN_CONFIG_SERVER_MODE}
    ports:
      - "5050:80"
    depends_on:
      pg:
        condition: service_healthy
    networks:
      - backend_network

  redis:
    image: redis:latest
    container_name: redis_julyberries
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}","ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - backend_network

  kafka1:
    image: bitnami/kafka:latest
    container_name: kafka1
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=puBRtLWlQRqO6T7ZbW7ztw
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9091,2@kafka2:9091,3@kafka3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:9090,EXTERNAL://${HOSTNAME:-localhost}:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    volumes:
      - ${KAFKA1_VOLUME_PATH:-./volumes_kafka/server-1}:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "bash -c '</dev/tcp/localhost/9092'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - backend_network

  kafka2:
    image: bitnami/kafka:latest
    container_name: kafka2
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_KRAFT_CLUSTER_ID=puBRtLWlQRqO6T7ZbW7ztw
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9091,2@kafka2:9091,3@kafka3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka2:9090,EXTERNAL://${HOSTNAME:-localhost}:9094
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9094:9094"
    volumes:
      - ${KAFKA1_VOLUME_PATH:-./volumes_kafka/server-2}:/bitnami/kafka
    networks:
      - backend_network

  kafka3:
    image: bitnami/kafka:latest
    container_name: kafka3
    environment:
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_KRAFT_CLUSTER_ID=puBRtLWlQRqO6T7ZbW7ztw
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9091,2@kafka2:9091,3@kafka3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka3:9090,EXTERNAL://${HOSTNAME:-localhost}:9096
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9096:9096"
    volumes:
      - ${KAFKA1_VOLUME_PATH:-./volumes_kafka/server-3}:/bitnami/kafka
    networks:
      - backend_network

  example_api_services:
    build:
      dockerfile: Docker-build/example_api/Dockerfile
      context: .
    working_dir: /example_api_services
    ports:
      - "4444:8000"
    depends_on:
      pg:
        condition: service_healthy
    networks:
      - backend_network

  worker:
    build:
      dockerfile: Docker-build/celery_build/Dockerfile
    command: celery -A celery_app.app worker --loglevel=info
    working_dir: /celery_services
    volumes:
      - .:/app
    depends_on:
      - redis
    networks:
      - backend_network

  beat:
    build:
      dockerfile: Docker-build/celery_build/Dockerfile
    command: celery -A celery_app.app beat --loglevel=info
    working_dir: /celery_services
    volumes:
      - .:/app
    depends_on:
      - redis
    networks:
      - backend_network

  flower:
    build:
      dockerfile: Docker-build/celery_build/Dockerfile
    command: celery -A celery_app.app flower --port=5555
    working_dir: /celery_services
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - backend_network

  reviews:
    build:
      dockerfile: Docker-build/reviews/Dockerfile
      context: .
    ports:
      - "5356:8000"
    depends_on:
      mongo_db:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    networks:
      - backend_network

  mongo_db:
    image: mongo:latest
    container_name: "mongo_database"
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/mongo/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "mongosh --eval 'db.adminCommand(\"ping\")' || exit 1" ]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - backend_network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    restart: always
    networks:
      - backend_network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    restart: always
    networks:
      - backend_network

networks:
  backend_network:
    driver: bridge

volumes:
  pgdata:
  redis_data:
  mongo_data:
    driver: local